%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Feature Overview_Rope
  m_EditorClassIdentifier: 
  m_displayName: Rope
  m_hierarchyName: Feature Overview/Rope
  m_context: {fileID: 11400000, guid: b05aea44e20f2b44f92707a0633fa98f, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1003
  m_overrideMarkdownText: '# Rope


    ![alt text](../Documentation/Images/Rope.gif){style="width:40%;height:40%"}


    After
    an initial prototype using a chain of physics colliders, a Verlet rope implementation
    was chosen, based on <a href="https://github.com/GaryMcWhorter/Verlet-Chain-Unity">this
    open-source example</a>. The first prototype made the rope look like sticks and
    was hard to tune, while the second approach gave more realistic results. It took
    several iterations to fine-tune the number of bones for the final asset to ensure
    fluidity without affecting performance.


    To improve its look and feel, the
    rope was designed to avoid elasticity. When pulled, it comes out of the ceiling
    instead of stretching. The rope can be grabbed from any point using one or two
    hands. A Grabbable follows the user''s hand; once grabbed, it locks to the nearest
    node, which then follows the user''s hand. This is duplicated for the other hand.
    These positions are synchronized over the network so remote users can see the
    active player grabbing the rope.


    To make the rope feel real, it must collide
    correctly with walls and other objects. Collisions are calculated using <a href="https://docs.unity3d.com/ScriptReference/Physics.OverlapSphereNonAlloc.html">Physics.OverlapSphereNonAlloc</a>
    and <a href="https://docs.unity3d.com/ScriptReference/Physics.ComputePenetration.html">Physics.ComputePenetration</a>
    to push rope nodes away from each other and scene objects. In multiplayer, each
    client calculates their own rope updates but shares fixed locations when the
    rope is held by a user.



    ### Relevant Files

    - <a href="./Assets/CrypticCabinet/Scripts/Puzzles/SandPuzzle/Rope.cs">Rope.cs</a>


'
  m_overrideMarkdownRoot: .\Documentation/
